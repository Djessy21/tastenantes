/**
 * Script pour mettre √† jour les images des restaurants sans images ou avec des images par d√©faut
 *
 * Utilisation:
 * npm run update-images
 *
 * Ce script met √† jour les images des restaurants dans la base de donn√©es
 * qui n'ont pas d'image ou qui ont une image par d√©faut, en leur attribuant
 * une URL d'image valide depuis Unsplash.
 *
 * IMPORTANT: Ce script ne remplace PAS les images t√©l√©charg√©es par les utilisateurs.
 */

import { PrismaClient } from "@prisma/client";
import { getEnvironment } from "../app/lib/env";

// Initialiser le client Prisma
const prisma = new PrismaClient();

// Liste d'images de restaurants de haute qualit√©
const restaurantImages = [
  "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1000",
  "https://images.unsplash.com/photo-1552566626-52f8b828add9?q=80&w=1000",
  "https://images.unsplash.com/photo-1579684947550-22e945225d9a?q=80&w=1000",
  "https://images.unsplash.com/photo-1600891964599-f61ba0e24092?q=80&w=1000",
  "https://images.unsplash.com/photo-1571091718767-18b5b1457add?q=80&w=1000",
  "https://images.unsplash.com/photo-1559339352-11d035aa65de?q=80&w=1000",
  "https://images.unsplash.com/photo-1514933651103-005eec06c04b?q=80&w=1000",
  "https://images.unsplash.com/photo-1555396273-367ea4eb4db5?q=80&w=1000",
  "https://images.unsplash.com/photo-1537047902294-62a40c20a6ae?q=80&w=1000",
  "https://images.unsplash.com/photo-1590846406792-0adc7f938f1d?q=80&w=1000",
];

/**
 * V√©rifie si une image est une image utilisateur
 * @param imageUrl L'URL de l'image √† v√©rifier
 * @returns true si c'est une image utilisateur, false sinon
 */
function isUserImage(imageUrl: string | null): boolean {
  if (!imageUrl) return false;

  // Les images utilisateur sont stock√©es dans le dossier uploads
  // ou commencent par "user_"
  return imageUrl.includes("/uploads/") || imageUrl.includes("user_");
}

/**
 * V√©rifie si une image est une image par d√©faut ou manquante
 * @param imageUrl L'URL de l'image √† v√©rifier
 * @returns true si c'est une image par d√©faut ou manquante, false sinon
 */
function isDefaultOrMissingImage(imageUrl: string | null): boolean {
  if (!imageUrl) return true;

  return (
    imageUrl.includes("default-") ||
    imageUrl === "" ||
    imageUrl.includes("placeholder")
  );
}

async function updateRestaurantImages() {
  // Afficher l'environnement actuel
  const env = getEnvironment();
  console.log(`üåç Environnement d√©tect√©: ${env}`);

  try {
    console.log("üñºÔ∏è R√©cup√©ration de tous les restaurants...");

    // R√©cup√©rer tous les restaurants
    const restaurants = await prisma.restaurant.findMany();
    console.log(`üìä ${restaurants.length} restaurants trouv√©s.`);

    // Mettre √† jour uniquement les restaurants sans image ou avec une image par d√©faut
    let updatedCount = 0;
    let skippedCount = 0;

    for (const restaurant of restaurants) {
      // V√©rifier si l'image est une image utilisateur
      if (isUserImage(restaurant.image)) {
        console.log(
          `‚è≠Ô∏è Restaurant ${restaurant.id} (${restaurant.name}) ignor√©: image utilisateur d√©tect√©e.`
        );
        skippedCount++;
        continue;
      }

      // V√©rifier si l'image est une image par d√©faut ou manquante
      if (isDefaultOrMissingImage(restaurant.image)) {
        // S√©lectionner une image al√©atoire dans notre liste
        const randomImage =
          restaurantImages[Math.floor(Math.random() * restaurantImages.length)];

        // Mettre √† jour le restaurant
        await prisma.restaurant.update({
          where: { id: restaurant.id },
          data: {
            image: randomImage,
          },
        });

        console.log(
          `‚úÖ Restaurant ${restaurant.id} (${restaurant.name}) mis √† jour avec une nouvelle image.`
        );
        updatedCount++;
      } else {
        console.log(
          `‚è≠Ô∏è Restaurant ${restaurant.id} (${restaurant.name}) ignor√©: image existante.`
        );
        skippedCount++;
      }

      // Afficher la progression
      if (
        (updatedCount + skippedCount) % 10 === 0 ||
        updatedCount + skippedCount === restaurants.length
      ) {
        console.log(
          `üìä Progression: ${updatedCount + skippedCount}/${
            restaurants.length
          } restaurants trait√©s (${updatedCount} mis √† jour, ${skippedCount} ignor√©s).`
        );
      }
    }

    return { updatedCount, skippedCount };
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour des images:", error);
    throw error;
  } finally {
    // Fermer la connexion Prisma
    await prisma.$disconnect();
  }
}

// Ex√©cuter la fonction si le script est appel√© directement
if (require.main === module) {
  updateRestaurantImages()
    .then((result) => {
      console.log(
        `üìä Op√©ration termin√©e. ${result.updatedCount} restaurants mis √† jour avec de nouvelles images, ${result.skippedCount} restaurants ignor√©s.`
      );
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Erreur:", error);
      process.exit(1);
    });
}

// Exporter la fonction pour pouvoir l'utiliser dans d'autres scripts
export default updateRestaurantImages;
